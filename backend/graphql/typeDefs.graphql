type Query {
  getAllZonesDetails: [Zones]
  getAllProductionDetails: [ProductionCountDetails]
  getAllUsers(user_name:String!): Users
  getTodayProductionCount: [ProductionCountDetails]
  findProductionByShift(Shift:String!): [ProductionCountDetails]
  getAllMachines: [Machine]
  getAllMachineData : [MachineData]
}

type ProductionCountDetails {
  Zone: Int
  Shift: String
  ProductionCount: Int
  Date: String
  Id: Int
}

type Zones {
  ZoneId: Int
  ZoneName: String
}

type Users {
  user_name: String
  user_password: String
}

type Machine {
  Id: Int
  Machines: String
}

type physicalPhenomena {
  pp: String
  phNo: Int
}

type MachineData {
 machine: String
 physicalPhenomena: [physicalPhenomena]
 value: String
 actionTaken: [String]
}

type Mutation {
  createProductionCount(
    Zone: Int
    Shift: String
    ProductionCount: Int
    Date: DateTime
    Id: Int
  ): ProductionCountDetails!

  updateProductionCount(
  Id: Int
  ProductionCount: Int
  ): ProductionCountDetails!
}

type Subscription {
  newProductionCountAdded: ProductionCountDetails!
  updatedProductionCount: ProductionCountDetails!
}

scalar DateTime
